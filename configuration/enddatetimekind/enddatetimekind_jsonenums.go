// Code generated by jsonenums --type EndDateTimeKind; DO NOT EDIT.

package enddatetimekind

import (
	"encoding/json"
	"fmt"
)

var (
	_EndDateTimeKindNameToValue = map[string]EndDateTimeKind{
		"INCLUSIVE": INCLUSIVE,
		"EXCLUSIVE": EXCLUSIVE,
	}

	_EndDateTimeKindValueToName = map[EndDateTimeKind]string{
		INCLUSIVE: "INCLUSIVE",
		EXCLUSIVE: "EXCLUSIVE",
	}
)

func init() {
	var v EndDateTimeKind
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_EndDateTimeKindNameToValue = map[string]EndDateTimeKind{
			interface{}(INCLUSIVE).(fmt.Stringer).String(): INCLUSIVE,
			interface{}(EXCLUSIVE).(fmt.Stringer).String(): EXCLUSIVE,
		}
	}
}

// MarshalJSON is generated so EndDateTimeKind satisfies json.Marshaler.
func (r EndDateTimeKind) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _EndDateTimeKindValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid EndDateTimeKind: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so EndDateTimeKind satisfies json.Unmarshaler.
func (r *EndDateTimeKind) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("EndDateTimeKind should be a string, got %s", data)
	}
	v, ok := _EndDateTimeKindNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid EndDateTimeKind %q", s)
	}
	*r = v
	return nil
}
